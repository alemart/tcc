//                                        _                      __           
//    ____ _____ _____ ___  ___ _      __(_)___  ____ __________/ / __________
//   / __ `/ __ `/ __ `__ \/ _ \ | /| / / /_  / / __ `/ ___/ __  / / ___/ ___/
//  / /_/ / /_/ / / / / / /  __/ |/ |/ / / / /_/ /_/ / /  / /_/ /_/ /__/ /__  
//  \__, /\__,_/_/ /_/ /_/\___/|__/|__/_/ /___/\__,_/_/   \__,_/(_)___/\___/  
// /____/                                                                     
// 
// runtime engine
// Copyright (C) 2011  Alexandre Martins <alemartf(at)gmail(dot)com>
// 

function Clock(cyclesPerSecond, instructionsPerCycle, callback, ram) {
    if(typeof(cyclesPerSecond) != "number" || cyclesPerSecond <= 0)
        throw new Error("Clock error: invalid value for cycles per second");
    else if(typeof(instructionsPerCycle) != "number" || instructionsPerCycle <= 0)
        throw new Error("Clock error: invalid value for instructions per cycle");
    else if(typeof(callback) != "function")
        throw new Error("Clock error: invalid callback");

    // private stuff: clock
    var _me = this;
    var _ticks = 0;
    var _int = null;
    var _startTime = 0;

    // synchronized mode?
    var _videoFlipped = false;
    var _syncMode = false;

    var _run = function() {
        try {
            for(var i=0; ((_syncMode && !_videoFlipped) || !_syncMode) && i<instructionsPerCycle; i++) {
                callback();
                ++_ticks;
            }
            _videoFlipped = false;
        }
        catch(e) {
            _me.stop();
            alert("FATAL ERROR:\n\n" + e.message);
        }
    }

    var _enableSyncMode = function() {
        if(_int != null) {
            window.clearInterval(_int);
            _int = null;
        }

        _syncMode = true;
        _int = window.setInterval(_run, Math.ceil(1000.0 / 60.0)); // runs at 60 fps
    }

    var _disableSyncMode = function() {
        if(_int != null) {
            window.clearInterval(_int);
            _int = null;
        }
        
        _syncMode = false;
        _int = window.setInterval(_run, Math.ceil(1000.0 / cyclesPerSecond));
    }

    // public stuff
    this.getCyclesPerSecond = function() { return cyclesPerSecond; }
    this.getInstructionsPerCycle = function() { return instructionsPerCycle; }
    this.ticks = function() { return _ticks; }

    this.start = function() {
        if(_int == null) {
            _startTime = (new Date()).getTime();
            _int = window.setInterval(_run, Math.ceil(1000.0 / cyclesPerSecond));
        }
    }
    this.stop = function() {
        if(_int != null) {
            window.clearInterval(_int);
            _int = null;
            _startTime = 0;
            _ticks = 0;
        }
    }

    // observer pattern
    this.notify = function(observable, arg) {
        switch(arg.msg) {
            case "enabled double buffering":
                _enableSyncMode();
                break;

            case "disabled double buffering":
                _disableSyncMode();
                break;

            case "flipped":
                _videoFlipped = true;
                break;
        }
    }

    // write elapsed time to the ram
    if(ram != null) {
        var _elint = window.setInterval(function() {
            if(_int != null)
                ram.write(288, (new Date()).getTime() - _startTime);
        }, 10);
    }
}
